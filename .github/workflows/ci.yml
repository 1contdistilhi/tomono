name: "CI/CD"

"on":
  pull_request: {}
  push:
    branches: ["**"]
    tags: ["**"]

env:
  DOCKER_BUILDKIT: 1

jobs:

  build:
    timeout-minutes: 10
    name: "Build: compile source code and export HTML"
    runs-on: ubuntu-latest
    steps:
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Checkout
        uses: actions/checkout@v2
      - # This is very wasteful but caching docker images on GH actions is
        # INSANELY DIFFICULT!!! Honestly they bring it on themselves, this is
        # not an abstruse setup. But until I can cache docker images (let alone
        # layers), without pollution between branches / PRs, and without
        # 1873907182301273 lines of code, config and separate auths and external
        # services, Iâ€™ll just stick to rebuilding the entire image every time.
        name: Build the Docker image
        run: docker-compose build
      -
        name: Tangle code and export HTML
        run: docker-compose run --rm build
      -
        uses: actions/upload-artifact@v3
        with:
          name: index-html-${{github.sha}}
          path: index.html

  deploy_pages:
    timeout-minutes: 10
    if: ${{ github.ref_type == 'branch' && github.ref == 'refs/heads/master' }}
    name: "Deploy the HTML to GitHub Pages"
    runs-on: ubuntu-latest
    needs: build
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          ref: gh-pages
      - name: Remove files before artifact download
        run: rm -rf index.html
      -
        uses: actions/download-artifact@v3
        with:
          name: index-html-${{github.sha}}
      -
        name: configure git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "<>"
      -
        name: "Commit the HTML to gh-pages branch"
        run: |
          git add -A
          git commit -m "Update gh-pages from ${{github.ref}} @ ${{github.sha}}"
          git push origin gh-pages
