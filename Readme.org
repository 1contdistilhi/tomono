#+TITLE:        Multi- to Monorepo Migration
#+DESCRIPTION:  Migrate your multirepo to a monorepo using a bash script
#+AUTHOR:       Hraban Luyat
#+EMAIL:        hraban@0brg.net
#+PROPERTY:     header-args       :noweb no-export

This script merges multiple independent tiny repositories into a single "monorepo". The summary is ‚Äúevery repo is moved into its own subdirectory, branches are merged.‚Äù See [[Example]] for exactly how this works.

Further reading: https://syslog.ravelin.com/multi-to-mono-repository-c81d004df3ce

* Usage

Run the =tomono= script with your config on stdin, in the following format:

#+begin_example
git@github.com:mycompany/my-repo-abc.git abc
git@github.com:mycompany/my-repo-def.git def
#+end_example

Concrete example:

#+begin_src sh :eval never :exports code
$ cat my-repos.txt
git@github.com:mycompany/my-repo-abc.git abc
git@github.com:mycompany/my-repo-def.git def
$ /path/to/tomono < my-repos.txt

... noise noise noise

$ cd core # your monorepo is here now
#+end_src

That should be all üôÇ.

** Custom name for monorepo directory

Don‚Äôt like =core=? Set a different name through an envvar before running the script:

#+begin_src sh
export MONOREPO_NAME=the-big-repo
#+end_src

** Custom ‚Äúmaster‚Äù / ‚Äúmain‚Äù branch name

No need to do anything. This script does not handle any master / main branch in any special way. It just merges whatever branches exist. Don‚Äôt have a ‚Äúmaster‚Äù branch? None will be created.

Make sure your own computer has the right branch set up in its =init.defaultBranch= setting.

* Example

Run these commands to set up a fresh directory with git monorepos that you can later merge:

#+begin_src sh :exports code :eval never-export :results none
d="$(mktemp -d)"
echo "Setting up fresh multi-repos in $d"
cd "$d"

mkdir foo
(
    cd foo
    git init
    echo "This is foo" > i-am-foo.txt
    git add -A
    git commit -m "foo‚Äôs master"
    git checkout -b branch-a
    echo "I am a new foo feature" > feature-a.txt
    git add -A
    git commit -m "foo‚Äôs feature branch A"
)

mkdir bar
(
    cd bar
    git init
    echo "This is bar" > i-am-bar.txt
    git add -A
    git commit -m "bar‚Äôs master"
    git checkout -b branch-a
    echo "I am bar‚Äôs side of feature A" > feature-a.txt
    git add -A
    git commit -m "bar‚Äôs feature branch A"
    git branch branch-b master
    git checkout branch-b
    echo "I am an entirely new feature of bar: B" > feature-b.txt
    git add -A
    git commit -m "bar‚Äôs feature branch B"
)
#+end_src

You now have two directories:

- =foo= (branches: =master=, =branch-a=)
- =bar= (branches: =master=, =branch-a=, =branch-b=)

Assuming the =tomono= script is in your =$PATH=, you can invoke it like this, from that same directory:

#+begin_src sh :exports code :eval never-export :results none
tomono <<EOF
$PWD/foo foo
$PWD/bar bar
EOF
#+end_src

This will create a new directory, =core=, where you can find a git tree which looks somewhat like this:

#+begin_example
,*   0803699 Merge bar/master (HEAD -> master)
|\
,* \   6745370 Merge foo/master
|\ \
,* | | 9f1d472 root commit for monorepo branch master
 / /
| | *   c943466 Merge bar/branch-a (branch-a)
| | |\
| | | * 798a6ca bar‚Äôs feature branch A (bar/branch-a)
| | |/
| |/|
| | *   5ad4187 Merge foo/branch-a
| | |\
| | | * b783ebb foo‚Äôs feature branch A (foo/branch-a)
| |_|/
|/| |
,* | | 66d94bb foo‚Äôs master (foo/master)
 / /
| * 74077da root commit for monorepo branch branch-a
| *   d8bc902 Merge bar/branch-b (branch-b)
| |\
| | * ab40020 bar‚Äôs feature branch B (bar/branch-b)
| |/
|/|
,* | 4a9a874 bar‚Äôs master (bar/master)
 /
,* 2c48815 root commit for monorepo branch branch-b
#+end_example

* Implementation

The outer program structure is a flat bash script which loops over every repo supplied over stdin.

#+CAPTION: top-level
#+NAME: top-level
#+BEGIN_SRC shell :tangle tomono :comments link :shebang "#!/usr/bin/env bash" :references yes

<<set-flags>>

<<prep-dir>>

while read repourl reponame; do
    <<handle-remote>>
done

# <<copyright>>
#+END_SRC

** Per repository

Every repository is fetched and fully handled individually, and sequentially:

1. fetch all the data related to this repository,
2. immediately check out and initialise every single branch which belongs to that repository.

#+CAPTION: handle-remote
#+NAME: handle-remote
#+BEGIN_SRC shell :comments link :references yeye
  git remote add "$reponame" "$repourl"
  git fetch --no-tags "$reponame"
  <<list-branches>> | while read branch ; do
      <<handle-branch>>
  done
#+END_SRC

** Per branch (this is where the magic happens)

In the context of /a single repository check-out/, every branch is independently checked out into a subdir for that repository, and merged into the monorepo.

This is the money shot.

#+CAPTION: handle-branch
#+NAME: handle-branch
#+BEGIN_SRC sh
<<ensure-on-target-branch-in-monorepo>>
mkdir -p "$reponame"
git merge --strategy=ours "$reponame/$branch" --allow-unrelated-histories --no-commit
git --work-tree "./$reponame/" checkout "$reponame/$branch" -- .
git add -A
git commit -m "Merge $reponame/$branch"
#+END_SRC

*** Ensure we are on the right branch

We are given the variable =$branch= which is the final name of the branch we want to operate on. It is the same as the name of the branch in each individual target repo.

In this snippet, we ensure that we are ready to merge fresh code from a subrepo into this branch: either we checkout an existing branch in the monorepo by this name, or we create a fresh one.

#+CAPTION: ensure-on-target-branch-in-monorepo
#+NAME: ensure-on-target-branch-in-monorepo
#+BEGIN_SRC sh
if git checkout --orphan "$branch"; then
    git rm -rf . || :
    git commit --allow-empty -m "root commit for monorepo branch $branch"
else
    git checkout "$branch"
fi
#+END_SRC

Technically; we do it the other way around :) First I try to create a fresh branch, and only if that fails, I switch to the existing one. This way I'm sure that a branch exists, so when I =git checkout "$branch"= , I don't clash with a filename, instead.

Neat side effect of =git checkout --orphan=: if the branch already exists, but has no commits at all on it, the operation succeeds as if the branch were freshly created. This helps us with the very first commit on =master=, which will have been automatically created as part of =git init=:

#+begin_comment
I'm sure there is a cooler way to do the below, something involving =:results inline :exports both=, but I find my current options lacking. The HTML output is unreadable.

E.g. the HTML export of this:

#+begin_src sh :tangle no :results inline :exports both
date
#+end_src

results in two completely separate blocks. This makes a interactive shell session with multiple individual commands hard to follow. Would be nice to have some sort of plugin for this.
#+end_comment

#+begin_src sh :tangle no :exports code
$ cd "$(mktemp -d)"

$ git init
...

$ git status
On branch master
...

$ git checkout --orphan master
Switched to a new branch 'master'
$ echo $?
0

$ echo foo > bar ; git add bar ; git commit -m first
...

$ git checkout --orphan master
fatal: A branch named 'master' already exists.
$ echo $?
128
#+end_src

As you can see, doing =git checkout --orphan= on master on a fresh repo is no problem. Otherwise we would have had to special case it.

I'm sure this would still fail on some cases, e.g. branch names starting with a =-=. Ideally, I'd like a plumbing command to really just =git checkout-branch -- <branch-name>= no matter what. I'm sure the new =git switch= can help, but, quoth the man page:

#+begin_src :tangle no
THIS COMMAND IS EXPERIMENTAL. THE BEHAVIOR MAY CHANGE.
#+end_src

Ah well. Don't start your branch names with =-=, I guess?

** Set up the monorepo directory

We create a fresh directory for this script to run in, and bail if it already exists to avoid mangling an existing repo.

#+CAPTION: prep-dir
#+NAME: prep-dir
#+BEGIN_SRC sh
: "${MONOREPO_NAME:=core}"
if [[ -d "$MONOREPO_NAME" ]]; then
    >&2 echo "monorepo directory $MONOREPO_NAME already exists"
    exit 1
fi

mkdir "$MONOREPO_NAME"
cd "$MONOREPO_NAME"
git init
#+END_SRC

** List individual branches

I want a single branch name per line on stdout, for a single specific remote:

#+CAPTION: list-branches
#+NAME: list-branches
#+BEGIN_SRC sh
git ls-remote --heads --refs "$reponame" | sed 's_.*refs/heads/__'
#+END_SRC

Inspired by GitHub user @TacoVox in [[https://github.com/hraban/tomono/pull/39][PR 39]].

** Error flags, warnings, debug

Various sh flags allow us to control the behaviour of the shell: treat
any unknown variable reference as an error, treat any non-zero exit
status in a pipeline as an error (instead of only looking at the last
program), and treat any error as fatal and quit. Additionally, if the
=DEBUGSH= environment variable is set, enable "debug" mode by echoing
every command before it gets executed.

#+CAPTION: set-flags
#+NAME: set-flags
#+BEGIN_SRC sh
set -euo pipefail ${DEBUGSH+-x}
#+END_SRC

* Copyright and license

This is a cleanroom reimplementation of the tomono.sh script, originally written with copyright assigned to Ravelin Ltd., a UK fraud detection company. There were some questions around licensing, and it was unclear how to go forward with maintenance of this project given its dispersed copyright, so I went ahead and rewrote the entire thing for a fresh start.

The license and copyright attribution of this entire document can now be set:

#+CAPTION: copyright
#+NAME: copyright
#+BEGIN_SRC fundamental
Copyright ¬© 2020, 2022 Hraban Luyat

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, version 3 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
#+END_SRC

I did not look at the original implementation at all while developing this.

* Building the code                                                :noexport:
Here is code to build the exported HTML


#+BEGIN_COMMENT
Also, TODO: #+PROPERTY:     header-args:shell :comments link
#+END_COMMENT

#+NAME: configure-org-mode-for-this-file
#+BEGIN_SRC emacs-lisp :exports none :results none
;; This is configuration for org mode itself, not tomono src code. Don't export this.

;; TODO: Don't define as global functions? How do you do this in EL?

(defun org-info-name (info)
  (nth 4 info))

(defun insert-ln (&rest args)
  (apply #'insert args)
  (newline))

(defun should-reference (info)
  "Determine if this info block is a referencing code block"
  (not (memq (alist-get :noweb (nth 2 info))
             '(nil "no"))))

(defun re-findall (re str &optional offset)
  "Find all matches of a regex in the given string"
  (let ((start (string-match re str offset))
        (end (match-end 0)))
    (when (numberp start)
      (cons (substring str start end) (re-findall re str end)))))

;; Match groups are the perfect tool to achieve this but EL's regex is
;; inferior and it's not worth the hassle. Blag it manually.

(defun strip-delimiters (s prefix suffix)
  "Strip a prefix and suffix delimiter, e.g.:
(strip-delimiters \"<a>\" \"<\" \">\")
=> \"a\"

Note this function trusts the input string has those delimiters"
  (substring s (length prefix) (- (length suffix))))

(defun strip-noweb-delimiters (s)
  "Strip the org noweb link delimiters, usually << and >>"
  (strip-delimiters s org-babel-noweb-wrap-start org-babel-noweb-wrap-end))

(defun extract-refs (body)
  (mapcar #'strip-noweb-delimiters (re-findall (org-babel-noweb-wrap) body)))

(defun add-to-hash-list (k elem hash)
  "Assuming the hash values are lists, add this element to k's list"
  (puthash k (cons elem (gethash k hash)) hash))

(defun register-refs (name refs)
  (puthash name refs forward-refs)
  ;; Add a backreference to every ref
  (mapc (lambda (ref)
          (add-to-hash-list ref name back-refs))
        refs))

(defun parse-blocks ()
  (let ((forward-refs (make-hash-table :test 'equal))
        (back-refs (make-hash-table :test 'equal)))
    (org-babel-map-src-blocks nil
      ;; Probably not v efficient, but should be memoized anyway?
      (let* ((info (org-babel-get-src-block-info full-block))
             (name (org-info-name info)))
        (when (and name (should-reference info))
          (register-refs name (extract-refs body)))))
    (list forward-refs back-refs)))

(defun insert-reference (ref)
  (insert-ln "- [[" ref "][" ref "]]"))

(defun insert-references-block (info title refs)
  (when refs
    (message "Formatting references block %S: %S" title refs)
    (insert-ln title)
    (mapc #'insert-reference refs)))

(defun insert-references (info forward back)
  (when (or forward back)
    (newline)
    (insert-ln ":REFERENCES:")
    (insert-references-block info "References:" forward)
    (insert-references-block info "Used by:" back)
    (insert-ln ":END:")))

(defun get-references (name)
  (list (gethash name forward-refs) (gethash name back-refs)))

(defun fix-references (backend)
  "Append a references section to every noweb codeblock"
  (destructuring-bind (forward-refs back-refs) (parse-blocks)
    (org-babel-map-src-blocks nil
      (let ((info (org-babel-get-src-block-info full-block)))
        (when (should-reference info)
          (pcase-let ((`(,language ,body ,arguments ,switches ,name ,start ,coderef) info))
            (goto-char end-block)
            (apply #'insert-references info (get-references name))))))))

(add-hook 'org-export-before-parsing-hook 'fix-references nil t)
#+END_SRC
